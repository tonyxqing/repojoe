{"version":3,"sources":["Grid.js","color.js","counter/counterAPI.js","counter/counterSlice.js","counter/Counter.js","router/Navlist.js","App.js","reportWebVitals.js","app/store.js","index.js","counter/Counter.module.css"],"names":["Grid","Promise","resolve","reject","then","result","console","log","catch","onScroll","e","style","border","width","height","viewBox","Array","keys","map","i","strokeWidth","stroke","d","color","palette","primary","main","dark","light","secondary","fetchCount","amount","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","selectCount","counter","Counter","count","useSelector","dispatch","useDispatch","useState","incrementAmount","setIncrementAmount","incrementValue","Number","className","styles","row","button","onClick","textbox","onChange","target","asyncButton","getState","nav","padding","backgroundColor","display","textDecoration","textAlign","Navlist","useHistory","activeClassName","exact","to","path","component","Home","About","Contact","match","params","props","app","appHeader","flexDirection","alignSelf","justifyContent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","counterReducer","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.cf2c42a6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Grid() {\r\n    const width = 100;\r\n    const height = 100;\r\n    let p = new Promise((resolve, reject) => {\r\n      resolve(10)\r\n    });\r\n    \r\n    p.then((result) => {\r\n        console.log(result);\r\n        return result * 2;\r\n    }).then((result) => {\r\n        console.log(result);\r\n        return result * 3;\r\n    }).catch((result) =>\r\n        console.log(result));\r\n\r\n        \r\n\r\n    return(\r\n        <div onScroll={(e) => {console.log(e)}}>\r\n        <svg  style={{border: 'green solid 1px'}}width=\"80vh\" height=\"80vh\" viewBox='0 0 100 100'>\r\n            {[...Array(width).keys()].map((i) => {\r\n                let strokeWidth = 0.2\r\n                if (i === 50) {\r\n                    strokeWidth = .5\r\n                }\r\n                return(\r\n                    <path key={`horizontal${i}`} stroke='green' strokeWidth={strokeWidth} d={`M0 ${(i)} H100`}/>\r\n                )\r\n            })}\r\n\r\n           {[...Array(height).keys()].map((i) => {\r\n                           let strokeWidth = 0.2\r\n                           if (i === 50) {\r\n                               strokeWidth = .5\r\n                           }\r\n           return(\r\n                <path key={`vertical${i}`} stroke='green' strokeWidth={strokeWidth} d={`M${(i)} 0 V100`}/>\r\n            )\r\n        })}\r\n        </svg>\r\n        </div>\r\n    )\r\n}","const color = {\r\n    palette: {\r\n      primary: {\r\n        main: '#9ccc65',\r\n        dark: '#6d8e46',\r\n        light: '#afd683',\r\n\r\n\r\n      },\r\n      secondary: {\r\n        main: '#5c6bc0',\r\n        dark: '#404a86',\r\n        light: '#7c88cc',\r\n      },\r\n    },\r\n  }\r\n\r\nexport default color;","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  decrement,\n  increment,\n  incrementByAmount,\n  incrementAsync,\n  incrementIfOdd,\n  selectCount,\n} from './counterSlice';\nimport styles from './Counter.module.css';\n\nexport default function Counter() {\n  const count = useSelector(selectCount);\n  const dispatch = useDispatch();\n  const [incrementAmount, setIncrementAmount] = useState('2');\n\n  const incrementValue = Number(incrementAmount) || 0;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <button\n          className={styles.button}\n          aria-label=\"Decrement value\"\n          onClick={() => dispatch(decrement())}\n        >\n          -\n        </button>\n        <span className={styles.value}>{count}</span>\n        <button\n          className={styles.button}\n          aria-label=\"Increment value\"\n          onClick={() => dispatch(increment())}\n        >\n          +\n        </button>\n      </div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set increment amount\"\n          value={incrementAmount}\n          onChange={(e) => setIncrementAmount(e.target.value)}\n        />\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementByAmount(incrementValue))}\n        >\n          Add Amount\n        </button>\n        <button\n          className={styles.asyncButton}\n          onClick={() => dispatch(incrementAsync(incrementValue))}\n        >\n          Add Async\n        </button>\n        <button\n          className={styles.button}\n          onClick={() => dispatch(incrementIfOdd(incrementValue))}\n        >\n          Add If Odd\n        </button>\n      </div>\n    </div>\n  );\n}\n","import { Route, NavLink, useHistory } from \"react-router-dom\";\r\nimport Grid from \"../Grid\";\r\nimport Counter from \"../counter/Counter\";\r\nimport color from \"../color\";\r\n\r\nconst style = {\r\n    nav: {\r\n        padding: '1em',\r\n        backgroundColor: color.palette.primary.dark\r\n    },\r\n    a: {\r\n      display: 'block',\r\n      textDecoration: 'none',\r\n      textAlign: 'center',\r\n      padding: '14px 16px',\r\n      color: 'black'\r\n      \r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default function Navlist() {\r\n    const name = 'Tony'\r\n    const history = useHistory();\r\n    return(\r\n        <main>\r\n            <nav style={style.nav}>\r\n              <ul className=\"navlist\">\r\n                <li><NavLink style={style.a} activeClassName='active'  exact to=\"/\">Home</NavLink></li>\r\n                <li><NavLink style={style.a} activeClassName='active'  to={`/about/${name}`}>About</NavLink></li>\r\n                <li><NavLink style={style.a} activeClassName='active'  to=\"/contact\">Contact</NavLink></li>\r\n                <li><NavLink style={style.a} activeClassName='active'  to=\"/grid\">Grid</NavLink></li>\r\n                <li><NavLink style={style.a} activeClassName='active'  to=\"/counter\">Counter</NavLink></li>\\\r\n              </ul>\r\n\r\n            </nav>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/about/:name\" component={About} />\r\n            <Route path=\"/contact\"  component={Contact} />\r\n            <Route path=\"/grid\" component={Grid} />\r\n            <Route path=\"/counter\" component={Counter} />\r\n\r\n          </main>\r\n    )\r\n}\r\n\r\nconst Navbtn = () => {\r\n    const history = useHistory();\r\n    const goBack = () => {\r\n      history.goBack();\r\n    }\r\n    const goForward = () => {\r\n      history.goForward();\r\n    }\r\n    \r\n    const goHome = () => {\r\n      history.push('/');\r\n    }\r\n    return (\r\n        <>\r\n        <button onClick={goHome}>Go Home</button>\r\n        <button onClick={goBack}>Go Back</button>\r\n        <button onClick={goForward}>Go Forward</button>\r\n</>\r\n    )\r\n}\r\n\r\nconst Home = () => (\r\n    <>\r\n      <h1>Home</h1>\r\n      <p>For learning React Redux and Router</p>\r\n      \r\n    </>\r\n    );\r\n  \r\n\r\nconst About = ({match:{params:{name}}}) => (\r\n    <>\r\n      <h1>About {name}</h1>\r\n      <p></p>\r\n      \r\n    </>\r\n    );\r\n  \r\n  const Contact = (props) => (\r\n    <>\r\n    {console.log(props)}\r\n      <h1>Contact</h1>\r\n  \r\n    </>\r\n    );\r\n  ","import './App.css';\nimport Grid from './Grid';\nimport { BrowserRouter as Router, Route, Link, useHistory } from 'react-router-dom';\nimport React from 'react';\nimport color from './color';\nimport Navlist from './router/Navlist'\nconst styles = {\n  app: {\n    textAlign: 'center',\n\n  },\n  appHeader: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignSelf: 'center',\n    justifyContent: 'flex-start',\n    backgroundColor: color.palette.primary.main,\n    height: '100vh',\n  },\n\n}\nexport default function App() {\n\n  return (\n    <div style={styles.app}>\n      <header style={styles.appHeader}>\n        <Router>\n          <Navlist ></Navlist>\n        </Router>\n      </header>\n     \n    </div>\n  );\n}\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './app/store';\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__jKfKy\",\"value\":\"Counter_value__2uiD0\",\"button\":\"Counter_button__3E-Zh\",\"textbox\":\"Counter_textbox__1LFQx\",\"asyncButton\":\"Counter_asyncButton__2hHGU Counter_button__3E-Zh\"};"],"sourceRoot":""}